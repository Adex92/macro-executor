{
	"name": "Macro",
	"scopeName": "source.macro",
	"fileTypes": [
		"src",
		"def",
		"lnk"
	],
	"patterns": [
		{
			"include": "#line_comments"
		},
		{
			"include": "#line_include"
		},
		{
			"include": "#line_sub"
		},
		{
			"include": "#line_def"
		},
		{
			"include": "#line_label_def"
    },
		{
			"include": "#line_var_def"
		}
	],

	"repository": {
  	"line_ops": {
			"patterns": [

				{
					"include": "#line_comments"
        },
        {
					"include": "#line_block_skip"
        },
        {
					"include": "#line_string"
				},
				{
					"include": "#line_string_a"
				},
				{
					"include": "#line_string_b"
				},
				{
					"include": "#line_string_c"
        },
				{
					"match": "(?i)(?<=[^\\w]|\\d|^)(?=[^GMNO])([A-Z]\\s*)(?=\\-|\\#|\\[|[0-9])(?-i)",
					"name": "support.parameter.macro"
				},
				{
					"name": "constant.language.macro",
					"match": "(?i)(?<=\\W|\\d)(TRUE|FALSE|VALUE_NULL)(?=\\d*\\W)(?-i)"
				},
				{
					"name": "keyword.operator.arithmetic.macro",
					"match": "(?i)(?<=\\W|\\d)(OR|XOR|AND|MOD|SIN|COS|TAN|ASIN|ACOS|ATAN|SQRT|ABS|BIN|BCD|ROUND|FIX|FUP|LN|EXP|POW|ADP|PRM)(?=\\d*\\W)(?-i)"
				},
				{
					"name": "keyword.command.macro",
					"match": "(?i)(?<=^|\\d|\\s|\\/)(REVERSE|BLINK|NOBLINK|NORMAL|CLEARCRT|CLEAR|PRINT|WRITE|READ|DELAY|CALLP|CALL|RETURN|JUMP)(?-i)"
				},
				{
					"name": "keyword.command.m-code.macro",
					"match": "(?i)(?<=^|\\d|\\s|\\/)(M[0-9]+)(?-i)"
				},
				{
					"name": "keyword.command.g-code.macro",
					"match": "(?i)(?<=^|\\d|\\s|\\/)G[0-9]+(?-i)"
				},
				{
					"name": "constant.other.macro",
					"match": "(?i)(?<=^|\\d|\\s|\\/)N[0-9]+(?-i)"
        },
        {
          "name" :  "keyword.control.conditional.macro",
          "match": "(?i)(?<=^|\\W|\\d)(IF|ELSE|THEN|ENDIF|WHILE)(?!\\w)(?-i)"
        },
        {
          "name" :  "keyword.control.conditional.macro",
          "match": "(?i)(?<=^|\\W|\\d)(END|DO|GOTO)(?![a-zA-Z])(?-i)"
        }
			]
		},
		"line_sub": {
    "begin": "(?i)^\\s*(O)(?-i)",
    "beginCaptures": {
      "1": {
				"name": "variable.parameter"
			}
		},
    "end": "(RETURN)(?=\\n*.*\\n*\\s*O\\s*\\w{1,})",
    "endCaptures": {
      "1": {
				"name": ""
			}
		},
    "patterns": [
      {
        "match": "(?<=^O)(\\s*\\w+)",
        "name": "entity.name.function.macro"
      },
      {
        "include": "#line_parameter"
      },
      {
        "include": "#line_variable_value"
      },
      {
        "include": "#line_brackets"
      },
      {
        "include": "#line_ops"
      },
      {
        "include": "#line_sub"
      }
		]
  },
  "line_brackets": {
    "begin": "\\[",
    "beginCaptures": {
      "1": {
				"name": "keyword.operator.macro"
			}
		},
    "end": "\\]",
    "patterns": [
      {
        "include": "#line_brackets"
      },
      {
        "include": "#line_brackets_operator"
      },
      {
        "include": "#line_variable_value"
      },
      {
        "include": "#line_ops"
      }
		]
	},
  "line_brackets_operator": {
    "patterns": [
      {
        "match": "(?i)(?<=\\W|\\d)(EQ|NE|LT|LE|GE|GT)(?=\\d*\\W)(?-i)",
        "name": "keyword.operator.macro"
      }
    ]
	},
  "line_variable_value": {
    "patterns": [
      {
        "match": "(#[a-zA-Z0-9_]+\\b|#)",
        "name": "variable.parameter.macro"
      }
		]
  },
  "line_string": {
    "patterns": [
       {
         "name": "string.a.macro",
         "match": "(\\()(.*)(\\))"
       }
		]
	},
  "line_string_a": {
    "patterns": [
       {
         "name": "string.a.macro",
         "match": "(\\(\\')(.*)(\\'\\))"
       }
		]
	},
  "line_string_b": {
    "patterns": [
       {
         "name": "string.b.macro",
         "match": "(\\(\")(.*)(\"\\))"
       }
		]
	},
	"line_string_c": {
    "patterns": [
    	{
         "name": "string.c.code.macro",
         "match": "(\\(\\*)(.*)(\\*\\))"
       }
			]
		},
		"line_include": {
			"begin": "(?i)((?<=\\$)\\s*(INCLUDE))\\b\\s*(?-i)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.include.macro"
				}
			},
			"end": "\\Z",
			"patterns": [
				{
					"match": "(?i)([\\w]+.def)(?-i)",
					"name": "file.macro"
        },
        {
          "include": "#line_comments"
        }
			]
    },
    "line_block_skip": {
      "match": "(^\\/)",
      "name": "markup.italic.block_skip.macro"
		},
		"line_comments": {
			"begin": "((\\/\\*)|(\\;))(?=\\.*)",
			"beginCaptures" : {
				"1": {
					"name": "comment.macro"
				}
			},
			"end": "\\Z",
			"patterns": [
				{
					"begin": "(\\.*)",
					"beginCaptures": {
						"1": {
							"name": "comment.begin.macro"
						}
					},
					"end": "\\n",
					"name": "comment.end.macro"
				}
			]
		},
		"line_label_def": {
       "match": "(?<=\\>)[a-zA-Z0-9_]+\\b",
       "name": "constant.other.n-number.macro"
    },
		"line_var_def": {
      "match": "(?<=@)[a-zA-Z0-9_]+\\b",
      "name": "constant.other.n-number.macro"
   },
		"line_def": {
			"begin": "(\\$NOLIST)",
			"beginCaptures": {
				"1": {
					"name": "variable.language"
				}
			},
			"end": "(\\$LIST)",
			"endCaptures": {
				"1": {
					"name": "variable.language"
				}
			},
			"patterns": [
				{
					"begin": "(?=\\@|\\>)",
					"end": "(\\Z)",
					"patterns": [
						{
							"match": "(?<=\\>)[a-zA-Z0-9_]+\\b",
							"name": "constant.other.n-number.macro"
						},
						{
							"match": "(?<=\\@)[a-zA-Z0-9_]+\\b",
							"name": "constant.other.n-number.macro"
						},
						{
							"match": "(\\#[a-zA-Z0-9_]+)",
							"name": "variable.parameter.macro"
						},
						{
							"match": "([0-9_]+)",
							"name": "constant.numeric.macro"
						},
            {
              "include": "#line_comments"
            }
					]
        },
        {
          "include": "#line_comments"
        }
			]
		}
	}
}
